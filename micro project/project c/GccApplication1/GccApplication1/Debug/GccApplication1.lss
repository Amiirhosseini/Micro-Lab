
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000002ec  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3c  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063d  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047e  00000000  00000000  000016ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000866  00000000  00000000  000020bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002921  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_1>
   8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_2>
   c:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_3>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  7a:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	98 bb       	out	0x18, r25	; 24
  8e:	c0 98       	cbi	0x18, 0	; 24
  90:	c1 9a       	sbi	0x18, 1	; 24
  92:	32 e0       	ldi	r19, 0x02	; 2
  94:	3a 95       	dec	r19
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_Command+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <LCD_Command+0x18>
  9a:	c1 98       	cbi	0x18, 1	; 24
  9c:	ef e8       	ldi	r30, 0x8F	; 143
  9e:	f1 e0       	ldi	r31, 0x01	; 1
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_Command+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_Command+0x24>
  a6:	00 00       	nop
  a8:	28 b3       	in	r18, 0x18	; 24
  aa:	2f 70       	andi	r18, 0x0F	; 15
  ac:	f0 e1       	ldi	r31, 0x10	; 16
  ae:	8f 9f       	mul	r24, r31
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	82 2b       	or	r24, r18
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	c1 9a       	sbi	0x18, 1	; 24
  ba:	32 e0       	ldi	r19, 0x02	; 2
  bc:	3a 95       	dec	r19
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x3a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_Command+0x40>
  c2:	c1 98       	cbi	0x18, 1	; 24
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_Command+0x46>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_Command+0x4c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <LCD_Char>:
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	9f 70       	andi	r25, 0x0F	; 15
  d6:	28 2f       	mov	r18, r24
  d8:	20 7f       	andi	r18, 0xF0	; 240
  da:	92 2b       	or	r25, r18
  dc:	98 bb       	out	0x18, r25	; 24
  de:	c0 9a       	sbi	0x18, 0	; 24
  e0:	c1 9a       	sbi	0x18, 1	; 24
  e2:	32 e0       	ldi	r19, 0x02	; 2
  e4:	3a 95       	dec	r19
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Char+0x12>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_Char+0x18>
  ea:	c1 98       	cbi	0x18, 1	; 24
  ec:	ef e8       	ldi	r30, 0x8F	; 143
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_Char+0x1e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_Char+0x24>
  f6:	00 00       	nop
  f8:	28 b3       	in	r18, 0x18	; 24
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	f0 e1       	ldi	r31, 0x10	; 16
  fe:	8f 9f       	mul	r24, r31
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	82 2b       	or	r24, r18
 106:	88 bb       	out	0x18, r24	; 24
 108:	c1 9a       	sbi	0x18, 1	; 24
 10a:	32 e0       	ldi	r19, 0x02	; 2
 10c:	3a 95       	dec	r19
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Char+0x3a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_Char+0x40>
 112:	c1 98       	cbi	0x18, 1	; 24
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Char+0x46>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Char+0x4c>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <LCD_Init>:
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bb       	out	0x17, r24	; 23
 126:	8f e3       	ldi	r24, 0x3F	; 63
 128:	9c e9       	ldi	r25, 0x9C	; 156
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Init+0x8>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Init+0xe>
 130:	00 00       	nop
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 13e:	8c e0       	ldi	r24, 0x0C	; 12
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	9f e0       	ldi	r25, 0x0F	; 15
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Init+0x32>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Init+0x38>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <LCD_String>:
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
 164:	88 81       	ld	r24, Y
 166:	88 23       	and	r24, r24
 168:	31 f0       	breq	.+12     	; 0x176 <LCD_String+0x18>
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Char>
 170:	89 91       	ld	r24, Y+
 172:	81 11       	cpse	r24, r1
 174:	fb cf       	rjmp	.-10     	; 0x16c <LCD_String+0xe>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <__vector_1>:



/*Interrupt Service Routine for INT0*/
ISR(INT0_vect, ISR_NOBLOCK)
{
 17c:	78 94       	sei
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	//sei();			/* Enable Global Interrupt */
	LCD_Init();
 1a0:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
	LCD_String("in routine 0");
 1a4:	80 e6       	ldi	r24, 0x60	; 96
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	80 e7       	ldi	r24, 0x70	; 112
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <__vector_1+0x36>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <__vector_1+0x40>
 1bc:	00 00       	nop
	_delay_ms(100);  	/* Software debouncing control delay */
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_2>:

/*Interrupt Service Routine for INT1*/
ISR(INT1_vect, ISR_NOBLOCK)
{
 1e0:	78 94       	sei
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	//sei();			/* Enable Global Interrupt */
	LCD_Init();
 204:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
	//LCD_Command(0xC0);		/* Go to 2nd line*/
	LCD_String("in routine 1");
 208:	8d e6       	ldi	r24, 0x6D	; 109
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_String>
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	80 e7       	ldi	r24, 0x70	; 112
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <__vector_2+0x36>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <__vector_2+0x40>
 220:	00 00       	nop
	_delay_ms(100);  	/* Software debouncing control delay */
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_3>:

/*Interrupt Service Routine for INT2*/
ISR(INT2_vect, ISR_NOBLOCK)
{
 244:	78 94       	sei
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	//sei();			/* Enable Global Interrupt */
	LCD_Init();
 268:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
	LCD_String("in routine 2");
 26c:	8a e7       	ldi	r24, 0x7A	; 122
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_String>
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	80 e7       	ldi	r24, 0x70	; 112
 278:	92 e0       	ldi	r25, 0x02	; 2
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <__vector_3+0x36>
 282:	00 c0       	rjmp	.+0      	; 0x284 <__vector_3+0x40>
 284:	00 00       	nop
	_delay_ms(100);  	/* Software debouncing control delay */
}
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	7f 91       	pop	r23
 294:	6f 91       	pop	r22
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <main>:


int main()
{

	LCD_Init();			/* Initialization of LCD*/
 2a8:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>

	LCD_String("AmirrezaHosseini");	/* Write string on 1st line of LCD*/
 2ac:	87 e8       	ldi	r24, 0x87	; 135
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_String>
	LCD_Command(0xC0);		/* Go to 2nd line*/
 2b4:	80 ec       	ldi	r24, 0xC0	; 192
 2b6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_String("9820363");	/* Write string on 2nd line*/ 
 2ba:	88 e9       	ldi	r24, 0x98	; 152
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_String>
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	84 e3       	ldi	r24, 0x34	; 52
 2c6:	9c e0       	ldi	r25, 0x0C	; 12
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x20>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x2a>
 2d2:	00 00       	nop
	//PORTD=0xFF;		/* Make pull up high */
	
	//GICR = 1<<INT0;		/* Enable INT0*/
	
	//SET EXTERNAL INTERRUPT FOR INT0, INT1 AND INT2
	GICR=(1<<7)|(1<<6)|(1<<5);
 2d4:	80 ee       	ldi	r24, 0xE0	; 224
 2d6:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 0<<ISC00 | 0<<ISC11 | 0<<ISC10;  /* Trigger INT0 + INT1 on FALLING + LOW-LATCH edge */
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	85 bf       	out	0x35, r24	; 53
	MCUCSR = 1<<ISC2;  /* Trigger INT2 on rising edge */
 2dc:	80 e4       	ldi	r24, 0x40	; 64
 2de:	84 bf       	out	0x34, r24	; 52
	sei();			/* Enable Global Interrupt */
 2e0:	78 94       	sei
	
	
	while(1)
	{
		LCD_Init();
 2e2:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
 2e6:	fd cf       	rjmp	.-6      	; 0x2e2 <main+0x3a>

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
