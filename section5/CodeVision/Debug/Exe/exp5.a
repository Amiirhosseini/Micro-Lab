;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : EXP5
;Version :
;Date    : 3/30/2022
;Author  : Amirreza Hosseini 9820363
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include ".\source\myheader.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;extern int speed=0;
;extern int rotate=0;
;
;// Timer1 input capture interrupt service routine
;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
; 0000 001F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0020    Q6();
;PCODE: $0000000F VOL: 0
; 0000 0021 
; 0000 0022 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0026 {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0027 // Place your code here
; 0000 0028     char display[20];
; 0000 0029 // Reinitialize Timer2 value
; 0000 002A TCNT2=0x81;
;PCODE: $00000015 VOL: 0
;	display -> Y+0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002B // Place your code here
; 0000 002C        speed =  60/(0.327*(360/90));
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002D 
; 0000 002E        delay_ms(200);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002F        if(rotate<15)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0030        {
; 0000 0031        Q5_clockwise();
;PCODE: $00000020 VOL: 0
; 0000 0032        sprintf(display,"speed step:+%d",speed);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0033        rotate++;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0034        }
; 0000 0035        if(rotate>15)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0036        {
; 0000 0037        Q5_inv();
;PCODE: $00000035 VOL: 0
; 0000 0038        sprintf(display,"speed step:-%d",speed);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0039        rotate++;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 003A        }
; 0000 003B        if(rotate==15)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 003C        {
; 0000 003D        speed=0;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003E        sprintf(display,"speed step:%d",speed);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 003F        lcd_clear();
;PCODE: $00000058 VOL: 0
; 0000 0040        lcd_puts(display);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0041        delay_ms(5000);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0042        rotate++;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0043        }
; 0000 0044 
; 0000 0045        lcd_gotoxy(0,0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0046      // lcd_clear();
; 0000 0047        lcd_puts(display);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0048 
; 0000 0049 }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;void main(void)
; 0000 004C {
;PCODE: $0000006C VOL: 0
; 0000 004D // Declare your local variables here
; 0000 004E 
; 0000 004F // Input/Output Ports initialization
; 0000 0050 // Port A initialization
; 0000 0051 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0052 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0053 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0054 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0055 
; 0000 0056 // Port B initialization
; 0000 0057 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0058 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0059 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 005A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 005B 
; 0000 005C // Port C initialization
; 0000 005D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 005E DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 005F // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0060 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0061 
; 0000 0062 // Port D initialization
; 0000 0063 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0064 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0065 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0066 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0067 
; 0000 0068 // Timer/Counter 0 initialization
; 0000 0069 // Clock source: System Clock
; 0000 006A // Clock value: 1000.000 kHz
; 0000 006B // Mode: Phase correct PWM top=0xFF
; 0000 006C // OC0 output: Non-Inverted PWM
; 0000 006D // Timer Period: 0.51 ms
; 0000 006E // Output Pulse(s):
; 0000 006F // OC0 Period: 0.51 ms Width: 0.052 ms
; 0000 0070 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0071 TCNT0=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0072 //OCR0=0x00;
; 0000 0073 
; 0000 0074 // Timer/Counter 1 initialization
; 0000 0075 // Clock source: System Clock
; 0000 0076 // Clock value: 1000.000 kHz
; 0000 0077 // Mode: Normal top=0xFFFF
; 0000 0078 // OC1A output: Disconnected
; 0000 0079 // OC1B output: Disconnected
; 0000 007A // Noise Canceler: On
; 0000 007B // Input Capture on Rising Edge
; 0000 007C // Timer Period: 65.536 ms
; 0000 007D // Timer1 Overflow Interrupt: Off
; 0000 007E // Input Capture Interrupt: On
; 0000 007F // Compare A Match Interrupt: Off
; 0000 0080 // Compare B Match Interrupt: Off
; 0000 0081 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0082 TCCR1B=(1<<ICNC1) | (1<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0083 TCNT1H=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0084 TCNT1L=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0085 ICR1H=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0086 ICR1L=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0087 OCR1AH=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0088 OCR1AL=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0089 OCR1BH=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 008A OCR1BL=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 008B 
; 0000 008C // Timer/Counter 2 initialization
; 0000 008D // Clock source: System Clock
; 0000 008E // Clock value: 1000.000 kHz
; 0000 008F // Mode: Normal top=0xFF
; 0000 0090 // OC2 output: Disconnected
; 0000 0091 // Timer Period: 0.127 ms
; 0000 0092 ASSR=0<<AS2;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0093 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (1<<CS21) | (0<<CS20);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0094 TCNT2=0x81;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0095 OCR2=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0096 
; 0000 0097 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0098 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (1<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0099 
; 0000 009A // Alphanumeric LCD initialization
; 0000 009B // Connections are specified in the
; 0000 009C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 009D // RS - PORTC Bit 0
; 0000 009E // RD - PORTC Bit 1
; 0000 009F // EN - PORTC Bit 2
; 0000 00A0 // D4 - PORTC Bit 4
; 0000 00A1 // D5 - PORTC Bit 5
; 0000 00A2 // D6 - PORTC Bit 6
; 0000 00A3 // D7 - PORTC Bit 7
; 0000 00A4 // Characters/line: 16
; 0000 00A5 lcd_init(16);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00A6 
; 0000 00A7 // Global enable interrupts
; 0000 00A8 #asm("sei")
;PCODE: $000000A1 VOL: 0
	sei
;PCODE: $000000A2 VOL: 0
; 0000 00A9 
; 0000 00AA while (1)
;PCODE: $000000A3 VOL: 0
; 0000 00AB       {
; 0000 00AC       // Place your code here
; 0000 00AD       Q4();
;PCODE: $000000A4 VOL: 0
; 0000 00AE 
; 0000 00AF       }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00B0 }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;
;
;
;
