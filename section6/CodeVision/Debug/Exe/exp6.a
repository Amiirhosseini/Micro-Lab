;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : exp6
;Version :
;Date    : 4/23/2022
;Author  : Amirreza hosseini 9820363
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include ".\source\myheader.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;unsigned char adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
;
;// Declare your global variables here
;
;
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0024 static unsigned char input_index=0;
; 0000 0025 // Read the 8 most significant bits
; 0000 0026 // of the AD conversion result
; 0000 0027 adc_data[input_index]=ADCH;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0028 // Select next ADC input
; 0000 0029 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002A    input_index=0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002B ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002C // Delay needed for the stabilization of the ADC input voltage
; 0000 002D delay_us(10);
;PCODE: $0000001F VOL: 0
; 0000 002E // Start the AD conversion
; 0000 002F ADCSRA|=(1<<ADSC);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0030 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;void main(void)
; 0000 0033 {
;PCODE: $00000025 VOL: 0
; 0000 0034 // Declare your local variables here
; 0000 0035 
; 0000 0036 // Input/Output Ports initialization
; 0000 0037 // Port A initialization
; 0000 0038 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0039 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 003B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003C 
; 0000 003D // Port B initialization
; 0000 003E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 003F DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0040 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0041 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0042 
; 0000 0043 // Port C initialization
; 0000 0044 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0045 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0046 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0047 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0048 
; 0000 0049 // Port D initialization
; 0000 004A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 004C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 004E 
; 0000 004F // ADC initialization
; 0000 0050 // ADC Clock frequency: 1000.000 kHz
; 0000 0051 // ADC Voltage Reference: AVCC pin
; 0000 0052 // ADC Auto Trigger Source: Free Running
; 0000 0053 // Only the 8 most significant bits of
; 0000 0054 // the AD conversion result are used
; 0000 0055 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0056 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0057 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0058 
; 0000 0059 // Alphanumeric LCD initialization
; 0000 005A // Connections are specified in the
; 0000 005B // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 005C // RS - PORTC Bit 0
; 0000 005D // RD - PORTC Bit 1
; 0000 005E // EN - PORTC Bit 2
; 0000 005F // D4 - PORTC Bit 4
; 0000 0060 // D5 - PORTC Bit 5
; 0000 0061 // D6 - PORTC Bit 6
; 0000 0062 // D7 - PORTC Bit 7
; 0000 0063 // Characters/line: 16
; 0000 0064 lcd_init(16);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0065 
; 0000 0066 // Global enable interrupts
; 0000 0067 #asm("sei")
;PCODE: $0000003E VOL: 0
	sei
;PCODE: $0000003F VOL: 0
; 0000 0068 
; 0000 0069 //Q1();
; 0000 006A 
; 0000 006B while (1)
;PCODE: $00000040 VOL: 0
; 0000 006C       {
; 0000 006D       // Place your code here
; 0000 006E 
; 0000 006F       Q2();
;PCODE: $00000041 VOL: 0
; 0000 0070       Q3();
;PCODE: $00000042 VOL: 0
; 0000 0071 
; 0000 0072       }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0073 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
