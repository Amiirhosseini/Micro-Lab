;#include ".\source\allheaders.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0001 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0008 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0009 // Delay needed for the stabilization of the ADC input voltage
; 0001 000A delay_us(10);
;PCODE: $00000013 VOL: 0
; 0001 000B // Start the AD conversion
; 0001 000C ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 000D // Wait for the AD conversion to complete
; 0001 000E while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 000F ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 0010 return ADCH;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0011 }
;PCODE: $00000021 VOL: 0
;
;
;void Q1(void)
; 0001 0015 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 0016 // ADC initialization
; 0001 0017 // ADC Clock frequency: 1000.000 kHz
; 0001 0018 // ADC Voltage Reference: AVCC pin
; 0001 0019 // ADC Auto Trigger Source: Free Running
; 0001 001A ADMUX=ADC_VREF_TYPE;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 001B ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 001C SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 001D 
; 0001 001E 
; 0001 001F while(1)
;PCODE: $0000002A VOL: 0
; 0001 0020 {
; 0001 0021     int i=0;
; 0001 0022     int j=0;
; 0001 0023     int k=0;
; 0001 0024     char data=0;
; 0001 0025     char show[30];
; 0001 0026 
; 0001 0027     for(;i<8;i++)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;	i -> Y+35
;	j -> Y+33
;	k -> Y+31
;	data -> Y+30
;	show -> Y+0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0028     {
; 0001 0029       data=read_adc(i);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 002A       lcd_gotoxy(4*k,j);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 002B 
; 0001 002C       memset(show,0,strlen(show));
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 002D 
; 0001 002E       sprintf(show,"%d" ,data);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 002F       lcd_puts(show);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0030 
; 0001 0031 
; 0001 0032       k++;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 0033       if(i==3)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0034       {
; 0001 0035         j=1;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 0036         k=0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 0037       }
; 0001 0038 
; 0001 0039 
; 0001 003A     }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0001 003B 
; 0001 003C     delay_ms(10);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 003D 
; 0001 003E }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 003F 
; 0001 0040 }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;
;void Q2(void)
; 0001 0043 {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 0044     int i=0;
; 0001 0045     int j=0;
; 0001 0046     int k=0;
; 0001 0047     char data[8]={0};
; 0001 0048     char show[30];
; 0001 0049     int diff=0;
; 0001 004A 
; 0001 004B     for(;i<8;i++)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;	i -> R16,R17
;	j -> R18,R19
;	k -> R20,R21
;	data -> Y+38
;	show -> Y+8
;	diff -> Y+6
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 004C     {
; 0001 004D        // delay_ms(100);
; 0001 004E         lcd_gotoxy(4*k,j);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 004F 
; 0001 0050         diff= abs((data[i]/adc_data[i])-adc_data[i]);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 0051 
; 0001 0052         memset(show,0,strlen(show));
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0001 0053 
; 0001 0054        if(diff>=0.05)
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 0055         {
; 0001 0056 
; 0001 0057             data[i]=adc_data[i];
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 0058             sprintf(show,"%d" ,data[i]);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0001 0059             lcd_puts(show);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0001 005A 
; 0001 005B         }
; 0001 005C 
; 0001 005D 
; 0001 005E 
; 0001 005F         k++;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 0060       if(i==3)
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0001 0061       {
; 0001 0062         j=1;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0001 0063         k=0;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0001 0064       }
; 0001 0065 
; 0001 0066 
; 0001 0067         diff=0;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0001 0068     }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 0069 
; 0001 006A 
; 0001 006B }
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;
;
;void Q3(void)
; 0001 006F {
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 0070 // Timer/Counter 0 initialization
; 0001 0071 // Clock source: System Clock
; 0001 0072 // Clock value: 1000.000 kHz
; 0001 0073 // Mode: Phase correct PWM top=0xFF
; 0001 0074 // OC0 output: Non-Inverted PWM
; 0001 0075 // Timer Period: 0.51 ms
; 0001 0076 // Output Pulse(s):
; 0001 0077 // OC0 Period: 0.51 ms Width: 0.052 ms
; 0001 0078 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 0079 TCNT0=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0001 007A OCR0=adc_data[0];
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0001 007B 
; 0001 007C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 007D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 007E 
; 0001 007F 
; 0001 0080 }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
