;#include ".\source\allheaders.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;void q2(void)
; 0001 0004 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0005     unsigned char input='';
; 0001 0006     int a=0;
; 0001 0007     unsigned char str[3]="";
; 0001 0008     input = getchar();
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;	input -> R17
;	a -> R18,R19
;	str -> Y+4
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0009     switch (input){
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 000A         case '0':
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 000B             a=0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 000C             break;
;PCODE: $00000023 VOL: 0
; 0001 000D         case '1':
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 000E             a=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 000F             break;
;PCODE: $00000029 VOL: 0
; 0001 0010         case '2':
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0011             a=2;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 0012             break;
;PCODE: $0000002F VOL: 0
; 0001 0013         case '3':
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0001 0014             a=3;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0015             break;
;PCODE: $00000035 VOL: 0
; 0001 0016         case '4':
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0017             a=4;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0018             break;
;PCODE: $0000003B VOL: 0
; 0001 0019         case '5':
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 001A             a=5;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0001 001B             break;
;PCODE: $00000041 VOL: 0
; 0001 001C         case '6':
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 001D             a=6;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 001E             break;
;PCODE: $00000047 VOL: 0
; 0001 001F         case '7':
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0020             a=7;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0021             break;
;PCODE: $0000004D VOL: 0
; 0001 0022         case '8':
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0023             a=8;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 0024             break;
;PCODE: $00000053 VOL: 0
; 0001 0025         case '9':
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 0026             a=9;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 0027             break;
;PCODE: $00000059 VOL: 0
; 0001 0028         default:
;PCODE: $0000005A VOL: 0
; 0001 0029             a=100;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 002A     }
;PCODE: $0000005D VOL: 0
; 0001 002B     if( a>=0 && a<10){
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 002C         puts("\rTx:");
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 002D         putchar(input);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 002E         puts("\rRx: Data is a integer and 10*data=");
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 002F         a=a*10;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0030         sprintf(str, "%d", a);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 0031         puts(str);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0032         puts("\r");
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 0033      }
; 0001 0034 
; 0001 0035     else if(input=='D'){
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 0036         lcd_puts("LCD Deleted");
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 0037     }
; 0001 0038 
; 0001 0039     else if(input=='H'){
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 003A         puts("\rMicro processor Lab in Pandemic of Corona Virus\r");
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0001 003B     }
; 0001 003C     else if(input=='E'){
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 003D         puts("\rRx: END of the part\r");
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0001 003E     }
; 0001 003F     else {
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0001 0040         puts("\rTx: ");
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 0041         putchar(input);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0001 0042         puts("\r");
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 0043         puts("\rRx: input letter is:");
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 0044         putchar(input);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 0045         puts("\r");
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0001 0046     }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 0047 
; 0001 0048 }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0

	.DSEG
_0x20014:
	.BYTE 0x9F
;
;void q3(void)
; 0001 004B {

	.CSEG
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 004C     unsigned char my_data[64]="";
; 0001 004D     unsigned char in4='';
; 0001 004E     int i=0;
; 0001 004F     int a=0;
; 0001 0050     int j=0;
; 0001 0051     in4 = getchar();
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;	my_data -> Y+8
;	in4 -> R17
;	i -> R18,R19
;	a -> R20,R21
;	j -> Y+6
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 0052     putchar(in4);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0001 0053     my_data[0]='(';
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 0054     i++;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0001 0055     while (in4!='\r'){
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 0056         my_data[i]=in4;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0001 0057         in4 = getchar();
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 0058         putchar(in4);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 0059         i++;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0001 005A     }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 005B     my_data[i]=')';
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0001 005C     for (j=0;my_data[j]!=')';j++){
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 005D         switch (my_data[j]){
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0001 005E         case '0':
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 005F             a=0;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0001 0060             break;
;PCODE: $000000F6 VOL: 0
; 0001 0061         case '1':
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0001 0062             a=1;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 0063             break;
;PCODE: $000000FC VOL: 0
; 0001 0064         case '2':
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0001 0065             a=2;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0001 0066             break;
;PCODE: $00000102 VOL: 0
; 0001 0067         case '3':
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0001 0068             a=3;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 0069             break;
;PCODE: $00000108 VOL: 0
; 0001 006A         case '4':
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 006B             a=4;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0001 006C             break;
;PCODE: $0000010E VOL: 0
; 0001 006D         case '5':
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0001 006E             a=5;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0001 006F             break;
;PCODE: $00000114 VOL: 0
; 0001 0070         case '6':
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0001 0071             a=6;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0001 0072             break;
;PCODE: $0000011A VOL: 0
; 0001 0073         case '7':
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0001 0074             a=7;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0001 0075             break;
;PCODE: $00000120 VOL: 0
; 0001 0076         case '8':
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0001 0077             a=8;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0001 0078             break;
;PCODE: $00000126 VOL: 0
; 0001 0079         case '9':
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0001 007A             a=9;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0001 007B             break;
;PCODE: $0000012C VOL: 0
; 0001 007C         default:
;PCODE: $0000012D VOL: 0
; 0001 007D             a=100;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 007E     }
;PCODE: $00000130 VOL: 0
; 0001 007F     }
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 0080     if (a>9){
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0001 0081        puts("\rFrame must be 5 integer\r");
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0001 0082     }
; 0001 0083     else if(i!=6){
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0001 0084         puts("\rLength of frame not correct\r");
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0001 0085     }
; 0001 0086     else {
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0001 0087         puts("\tFrame is correct\r");
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0001 0088         lcd_puts(my_data);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0001 0089     }
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0001 008A }
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0

	.DSEG
_0x20032:
	.BYTE 0x4B
