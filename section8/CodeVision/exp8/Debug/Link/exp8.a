;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;? Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/18/2020
;Author  : Amirreza Hosseini 9820363
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include "./source/headers.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Graphic Display functions
;
;GLCDINIT_t glcd_init_data;
;
;// Declare your global variables here
;
;unsigned long int x;
;unsigned long int y;
;unsigned int s = 0;
;unsigned int m = 0;
;unsigned int h = 0;
;
;const unsigned short Untitled8x8[] = {
;        0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF,
;        0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF,
;        0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF,
;        0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF,
;        0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83,
;        0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF,
;        0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF,
;        0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83,
;        0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF,
;        0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF,
;        0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF,
;        0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB, 0x87,
;        0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED, 0xEB,
;        0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB, 0xED,
;        0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xEB,
;        0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF, 0x87,
;        0x87, 0xEB, 0xED, 0xEB, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xEF, 0xEF, 0x83, 0xFF, 0xFF, 0xFF, 0xFF,
;        };

	.DSEG
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 003C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003D // Reinitialize Timer1 value
; 0000 003E TCNT1H=0x85EE >> 8;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 003F TCNT1L=0x85EE & 0xff;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0040 // Place your code here
; 0000 0041 question3();
;PCODE: $00000013 VOL: 0
; 0000 0042 
; 0000 0043 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;void main(void)
; 0000 0046 {
;PCODE: $00000017 VOL: 0
; 0000 0047     // Declare your local variables here
; 0000 0048     // Variable used to store graphic display
; 0000 0049     init_board();
;PCODE: $00000018 VOL: 0
; 0000 004A     glcd_init(&glcd_init_data);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 004B 
; 0000 004C     // Global enable interrupts
; 0000 004D     question2();
;PCODE: $0000001B VOL: 0
; 0000 004E     delay_ms(5000);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 004F     // Global enable interrupts
; 0000 0050     #asm("sei")
;PCODE: $0000001E VOL: 0
	sei
;PCODE: $0000001F VOL: 0
; 0000 0051     delay_ms(10000);  //question3
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0052     #asm("cli")
;PCODE: $00000022 VOL: 0
	cli
;PCODE: $00000023 VOL: 0
; 0000 0053     question1();
;PCODE: $00000024 VOL: 0
; 0000 0054 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
